generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  nickname       String
  profileImage   String
  ageRange       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  birthday       String
  birthyear      String
  email          String          @unique
  name           String
  id             String          @id @default(cuid())
  gender         String?
  role           Role            @default(USER)
  lastLoginAt    DateTime        @default(now()) @updatedAt
  oauthAccounts  OAuthAccount[]
  selectedStocks SelectedStock[]

  @@map("users")
}

model OAuthAccount {
  providerUserId        String
  connectedAt           DateTime @default(now())
  synchedAt             DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  accessToken           String
  refreshToken          String
  id                    String   @id @default(cuid())
  userId                String
  provider              String
  accessTokenExpiresIn  DateTime
  refreshTokenExpiresIn DateTime
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("oauth_accounts")
}

model Stock {
  name           String
  thumbnailImage String
  id             Int             @id @default(autoincrement())
  posts          Post[]
  selectedStocks SelectedStock[]

  @@map("stocks")
}

model SelectedStock {
  userId  String
  stockId Int
  id      Int    @id @default(autoincrement())
  stock   Stock  @relation(fields: [stockId], references: [id])
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockId])
  @@map("selected_stocks")
}

enum Role {
  ADMIN
  USER
}
